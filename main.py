import logging
import random
import string
import importlib
from time import sleep

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ParseMode,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

import users_db  # –í–∞—à —Ñ–∞–π–ª —Å –∫–ª–∞—Å—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from game_codes import GAME_CODES  # –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–∞–º–∏ –∏–≥—Ä {–∫–æ–¥: –∏–º—è –∏–≥—Ä—ã}
from game_links import GAME_URLS   # –°–ª–æ–≤–∞—Ä—å —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–≥—Ä {–∏–º—è –∏–≥—Ä—ã: —Å—Å—ã–ª–∫–∞}

API_TOKEN = '7919206466:AAGFvjaG8pfyq9aFMgHlVQsU3pbMEuR3LAk'
channelid = '-1002733642571'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

user_sessions = {}

class RegisterState(StatesGroup):
    full_name = State()
    password = State()

class LoginState(StatesGroup):
    password = State()

class AddGameState(StatesGroup):
    code = State()

def get_main_keyboard(user=None):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    if user:
        keyboard.add(KeyboardButton("üö™ –í—ã–π—Ç–∏"))
        keyboard.add(KeyboardButton("üë§ My Profile"))
        if user.games.lower() != "none":
            keyboard.add(KeyboardButton("üéÆ My Games"))
            keyboard.add(KeyboardButton("‚ûïAdd Game"))
    else:
        keyboard.add(KeyboardButton("üîê –í–æ–π—Ç–∏"), KeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"))
    return keyboard

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user = user_sessions.get(message.from_user.id)
    keyboard = get_main_keyboard(user)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    sleep(0.5)
    await bot.send_message(chat_id=channelid,
                           text=f"-----------New User-------------\n"
                                f"nick name: {message.from_user.first_name}\n"
                                f"user name: @{message.from_user.username}\n"
                                f"user id: {message.from_user.id}\n"
                                f"---------------------------------------\n")

@dp.message_handler(lambda message: message.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def register_start(message: types.Message):
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    await RegisterState.full_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=RegisterState.full_name)
async def register_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await RegisterState.next()
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")

@dp.message_handler(state=RegisterState.password)
async def register_complete(message: types.Message, state: FSMContext):
    data = await state.get_data()
    full_name = data['full_name']
    password = message.text
    random_class = ''.join(random.choices(string.digits, k=7) + random.choices(string.ascii_letters, k=4))

    user_code = f"user{random_class}"
    new_user_class = f"""class {user_code}:
    Password = \"{password}\"
    userfullname = \"{full_name}\"
    status = \"player\"
    games = \"Tic Tac Toe(Default)\"
    experience = \"beginner\"\n"""

    with open("users_db.py", "a", encoding="utf-8") as f:
        f.write("\n" + new_user_class)

    importlib.reload(users_db)
    user_class = getattr(users_db, user_code)
    user_sessions[message.from_user.id] = user_class
    await state.finish()
    keyboard = get_main_keyboard(user_class)
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üîê –í–æ–π—Ç–∏")
async def login_start(message: types.Message):
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    await LoginState.password.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=LoginState.password)
async def login_user(message: types.Message, state: FSMContext):
    password = message.text
    importlib.reload(users_db)

    for attr in dir(users_db):
        user_class = getattr(users_db, attr)
        if isinstance(user_class, type) and hasattr(user_class, 'Password') and getattr(user_class, 'Password') == password:
            user_sessions[message.from_user.id] = user_class
            await state.finish()
            keyboard = get_main_keyboard(user_class)
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!", reply_markup=keyboard)
            return

    await state.finish()
    keyboard = get_main_keyboard()
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üö™ –í—ã–π—Ç–∏")
async def logout(message: types.Message):
    user_sessions.pop(message.from_user.id, None)
    keyboard = get_main_keyboard()
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üéÆ My Games")
async def my_games_handler(message: types.Message):
    user = user_sessions.get(message.from_user.id)
    if user and user.games.lower() != "none":
        games_list = [game.strip() for game in user.games.split(",") if game.strip()]
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for game in games_list:
            keyboard.add(KeyboardButton(game))
        keyboard.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))
        await message.answer("üéÆ –í–∞—à–∏ –∏–≥—Ä—ã:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∏–≥—Ä.")

@dp.message_handler(lambda message: message.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    user = user_sessions.get(message.from_user.id)
    keyboard = get_main_keyboard(user)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üë§ My Profile")
async def show_profile(message: types.Message):
    user = user_sessions.get(message.from_user.id)
    if user:
        profile_text = (
            f"üë§ <b>Full Name:</b> {user.userfullname}\n"
            f"üìõ <b>Status:</b> {user.status}\n"
            f"üéÆ <b>Games:</b> {user.games}\n"
            f"üìà <b>Experience:</b> {user.experience}"
        )
        await message.answer(profile_text, parse_mode=ParseMode.HTML)
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")

@dp.message_handler(lambda message: message.text == "‚ûïAdd Game")
async def add_game_start(message: types.Message):
    user = user_sessions.get(message.from_user.id)
    if not user:
        await message.answer("‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
        return
    await AddGameState.code.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=AddGameState.code)
async def add_game_process(message: types.Message, state: FSMContext):
    code_entered = message.text.strip()
    if code_entered.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        user = user_sessions.get(message.from_user.id)
        keyboard = get_main_keyboard(user)
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
        return

    user = user_sessions.get(message.from_user.id)
    if not user:
        await state.finish()
        keyboard = get_main_keyboard()
        await message.answer("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=keyboard)
        return

    if code_entered not in GAME_CODES:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    new_game = GAME_CODES[code_entered]

    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª users_db.py
    with open("users_db.py", "r", encoding="utf-8") as f:
        lines = f.readlines()

    user_class_name = user.__name__
    new_lines = []
    inside_user_class = False
    games_updated = False

    for line in lines:
        if line.strip().startswith(f"class {user_class_name}"):
            inside_user_class = True
            new_lines.append(line)
            continue
        if inside_user_class:
            if line.strip().startswith("games ="):
                current_games_str = line.split("=", 1)[1].strip().strip('"').strip("'")
                current_games = [g.strip() for g in current_games_str.split(",") if g.strip()]
                if new_game not in current_games:
                    current_games.append(new_game)
                updated_games_str = ", ".join(current_games)
                new_line = f'    games = "{updated_games_str}"\n'
                new_lines.append(new_line)
                games_updated = True
                continue
            if line.strip() == "" or not line.startswith("    "):
                inside_user_class = False
        new_lines.append(line)

    if not games_updated:
        # –ï—Å–ª–∏ –ø–æ–ª–µ games –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–æ –æ–±—ã—á–Ω–æ –æ–Ω–æ –µ—Å—Ç—å
        import re
        with open("users_db.py", "r", encoding="utf-8") as f:
            content = f.read()
        pattern = rf"(class {user_class_name}:\n(?: {4}.*\n)+)"
        import re
        match = re.search(pattern, content, re.MULTILINE)
        if match:
            class_text = match.group(0)
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å games –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞
            new_lines.append(f'    games = "{new_game}"\n')

    with open("users_db.py", "w", encoding="utf-8") as f:
        f.writelines(new_lines)

    importlib.reload(users_db)
    user_sessions[message.from_user.id] = getattr(users_db, user_class_name)
    await state.finish()

    keyboard = get_main_keyboard(user_sessions[message.from_user.id])
    await message.answer(f"‚úÖ –ò–≥—Ä–∞ '{new_game}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!", reply_markup=keyboard)

@dp.message_handler(lambda message: True)
async def launch_game_handler(message: types.Message):
    user = user_sessions.get(message.from_user.id)
    if not user:
        return
    games = [g.strip() for g in user.games.split(",") if g.strip()]
    text = message.text.strip()
    if text in games and text in GAME_URLS:
        game_url = GAME_URLS[text]
        inline_kb = InlineKeyboardMarkup()
        inline_kb.add(InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å", url=game_url))
        await message.answer(f"üéÆ {text}", reply_markup=inline_kb)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
